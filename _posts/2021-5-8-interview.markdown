---
layout:     post
title:      "2021 面试经历"
date:       2021-5-8 16:53:00
author:     "decent"
header-img-credit: false
tags:
    - 随笔
---

#### 初期准备
年初从某厂辞职，第一个星期玩了一个星期游戏，后面看了两个星期书，这段时间面了三个小公司，算是初步积累经验，两个星期很快过去了，但是感觉也没有学到什么，这段时间终究是没能学点真东西。原因大概有下面几点：
1. 零散的面试会打算节奏(指三个小公司)，如果近期有面试，我会追求短期目标，去准备面试，而不是长期目标去提高综合能力，这个可能是不好的地方。小公司面试带来的经验有限，尚不清楚是利是弊。
2. 自己还游戏，我有个坏习惯，吃完饭玩局游戏，遇到烦心事玩局游戏，面试完玩局游戏，总之有什么事都是玩局游戏冷静一下，这倒好，游戏占据了相当一部分时间。
3. 要复习什么目标不明确，买了一些书，但是也没有认真看，一本书从一而终还是挺难的。
4. 一个知识点如果要深入研究耗费很大精力，期间时常会自我怀疑，我到底是面向`面试`复习还是面向`知识`复习？还担心知识如果我深入研究了以后会不会用不到，还有非常重要的一点，由于能力、精力、时间有限，我发现自己不能去深入研究一些东西，这时候我也在想：知识的积累是一个漫长的过程，要在工作的过程中去做。

#### 面试
后面有两三周的时间，基本每天都有面试，倒也不是非要投这么多公司，我最想去的公司是byteDance(bD)，结果bD在第二轮面试挂了，当时有点慌，疯狂投了一批简历，当时心态悲观，心想这大厂好歹给我中一个啊，然后各公司面试就陆续展开了，约好时间一天一个面试甚至一天两个面试。面试这段时间，基本没有在看新知识了，心态多少还是有点紧张，每天都是以当天的面试为目标。总结一下遇到的一些面试题，这里不以公司为维度综述，转而以K8s组件或者知识点为维度分析，也不说明是哪些公司问这些问题了，这个意义也不是很大，目的是说明公司都在关心什么事情。

##### Kubelet
Kubelet承担了节点Pod拉起的工作，组件比较丰富，需要了解的东西也比较多。这部分docker的内容也有涉及。下面这些问题我不能百分之百回答，需要感兴趣的人自己去寻找答案。
* device plugin工作原理（以GPU为例），cpu manager工作原理（numa相关的），这个K8s的文档比较丰富，看文档应付面试是够的，但是自己没有过开发经历，这个问题倒也不大。
* cgroup相关，cpu quota，cpu share，cpu set，memory也是。
* 镜像管理，这个我以为大家都不会问的，自己也没关注很多，事实证明这个需要关注下。大概分两方面吧：1.镜像存储驱动原理，aufs/overlayfs等。2. 镜像预热，分发等，我不懂，问就说不会，镜像分发uber有p2p实现，可以参考下。
* kubelet工作流程，这里需要关注kubelet如何监听pod的，kubelet syncPod的基本流程是什么，PLEG流程是什么？比较典型的问题是`创建了一个Statefulset之后会发生什么事情`，这个kubelet这边可以展开说说。
* CRI，CRI的接口应该是了解下就可以（镜像管理接口/Sandbox/容器等），问这些问题的人可能更关心的是CNI的内容。
* kubelet都有哪些manager，这个比较多，大家也都知道几个。

##### K8s网络
网络是很大的一块，我自己也只是做到了了解的程度，这里主要关心下CNI。

CNI定义了什么？这个推荐去看CNI的设计文档，看文档之前一直很懵，自己也没做过，看了之后就大概了解了，再就是结合Flannel插件的实现，了解配置Pod网络的大致流程，这个一个典型的问题就是，`以两个节点的容器为例，说明容器是如何实现跨主机通信的`，我一般就以Flannel vxlan为例说明两个容器的通信过程。Flannel UDP没人用。FLannel host-gw不了解，Calico也不了解，但是后者都有人问到，我选择性放弃，我也不是做网络的。还有一些问题，使用CNI来限速，IPAM地址管理等，如果固定容器IP等。网络是很大的一块。

K8s Service的代理模式，iptables以及ipvs的区别，实现方式，服务发现机制。

K8s Ingress也要了解一些，还有一些公司关心如何通过隧道实现跨集群通信（这个问题本身我不是很清楚，直接回答不了解）

##### K8s存储
存储我是比较熟悉的一块，基本没啥问题，我之前主要做本地存储，设计到的组件有kubelet、scheduler、attach-detach controller、pv controller，K8s volume plugin的实现，CSI等。这里一个典型的问题是`创建一个带pvc的statefulset，说一些pv及底层介质的生成流程`，这个基本没啥问题，关于调度器的设计等（存储资源上报、检查、预留等）。

CSI，说一些CSI的工作流程，还是以创建一个带pvc的pod为例。

还有就是具体底层介质相关的，比如使用lvm实现存储池。xfs quota容量隔离，iops隔离相关的问题。

##### 调度器
调度器比较灵活，可扩展和定制化程度都比较高，这个复杂的我也不太懂，简单的懂一些。
* 调度pod过程。
* scheduler framework都有哪些扩展点。
* volumebinder插件工作流程，设计到的pvc状态的更新，静态provision、动态Provision区别
* bind工作流程
* scheduler cache的一些问题。
* batch scheduler、descheduler
* HPA、VPA、CA

##### 系统原理
* 说一下进程、线程、goroutine的区别与联系
* TCP流控控制（窗口控制）、拥塞控制、三次握手、四次挥手，time wait，close wait
* 什么情况下会有RST报文
* 如何排查iowait高的情况
* linux的IO stack，（自己做K8s存储的，多少了解一点）
* http协议报文格式，报文分隔符

##### golang
关于golang的调度器，GC管理，内存管理，总是绕不开的话题，但是这种问题从面试经历来看，大厂基本不问，或者稍微一问，但是一些不成熟的面试官可能会揪着你问，说实话有个疑问，了解这个能给你带来多大的编程上的帮助呢？
* golang运行时，调度，内存管理，GC
* 数据结构，slice，map，sync map
* goroutine泄露的排查，之前没排查过，就算没排查过也要去查查理论
* sync.WaitGroup
* 带buffer的channel以及不带buffer的channel，区别，使用场景
* 如何理解"通过通信来共享内存，xxxx"

##### 算法
一般问二叉树比较多，一方面题目比较好描述，也很灵活，关于二叉树，学会三种遍历方式（先序、中序、后序），以及层序遍历。
算法自己去刷leetcode吧，这个说具体题目意义也不大（我也都忘记了），主要是中等、easy难度。
* 使用channel实现消费者生产者
* 多个线程交替打印1、2、3、4、5、...
* 使用滑动窗口，求一个字符串的子串，这个子串含有最长的不重复字符
* 反转链表，判断两个链表是否相交
* 给定一个数字N，判断从1、2、...、N这些数字中，数字1出现的次数，出现是指在个位、十位是1，这个是剑指offer上的一个题，hard难度，头条一面问的，感觉有点扯。
* 实现计算器（表达式求值），求（1+2）*3，一个小公司问的，感觉同样有点扯。hard难度。
* 求Pow(a,N)，递归，剑指offer上也有

##### 其他问题
* k8s federation 公司内部的应用，解决的问题，这个闲聊的性质更大一点。
* raft工作流程，说一下选举过程
* serverless，这个看来得学一下，后面看看买本书
* 微服务，如何理解微服务
* etcd为什么使用boltdb，不使用leveldb，不懂

很多问题都忘记了，一般一次面试后我就选择性忘记面了什么题目，也没有面试后反思查阅的习惯。这次面试中规中矩，拿到了一些大厂的offer，但是岗位都一般。同样这也是一次不寻常的生活经历，作为无业游民在家待了很长时间，也多亏女朋友给与的精神上的鼓励。以后去了公司闷头做事吧。也希望以后没有这样的经历，自己需要时间去沉淀积累。